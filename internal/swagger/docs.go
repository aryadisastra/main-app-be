// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/shipments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengambil semua pengiriman milik user yang sedang login.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shipments"
                ],
                "summary": "Get My Shipments",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpx.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.ShipmentResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Membuat pesanan pengiriman untuk user yang sedang login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shipments"
                ],
                "summary": "Create Shipment",
                "parameters": [
                    {
                        "description": "Create shipment payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateShipmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpx.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ShipmentResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    }
                }
            }
        },
        "/api/v1/shipments/track/{trackingNumber}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Melacak status pengiriman berdasarkan nomor resi.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shipments"
                ],
                "summary": "Track Shipment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tracking Number",
                        "name": "trackingNumber",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpx.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ShipmentResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    }
                }
            }
        },
        "/api/v1/shipments/{trackingNumber}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mengubah status pengiriman. Hanya role ` + "`" + `admin` + "`" + ` yang diizinkan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shipments"
                ],
                "summary": "Update Shipment Status (admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tracking Number",
                        "name": "trackingNumber",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update status payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httpx.Envelope"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ShipmentResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpx.Envelope"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateShipmentRequest": {
            "type": "object",
            "required": [
                "item_description",
                "receiver_address",
                "receiver_name",
                "sender_address",
                "sender_name"
            ],
            "properties": {
                "item_description": {
                    "type": "string"
                },
                "receiver_address": {
                    "type": "string"
                },
                "receiver_name": {
                    "type": "string"
                },
                "sender_address": {
                    "type": "string"
                },
                "sender_name": {
                    "type": "string"
                }
            }
        },
        "dto.ShipmentResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "item_description": {
                    "type": "string"
                },
                "receiver_address": {
                    "type": "string"
                },
                "receiver_name": {
                    "type": "string"
                },
                "sender_address": {
                    "type": "string"
                },
                "sender_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tracking_number": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Shipped",
                        "InTransit",
                        "Delivered",
                        "Cancelled"
                    ]
                }
            }
        },
        "httpx.Envelope": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "result": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
